kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
  namespace: own
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-snake-volume
  namespace: own
  labels:
    type: local
spec:
  storageClassName: "local-storage"
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config-snake
  namespace: own
  labels:
    app: postgres-snake
data:
  POSTGRES_DB: snakedb
  POSTGRES_USER: snake
  POSTGRES_PASSWORD: superSecretPassword
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-snake
  namespace: own
spec:
  selector:
    app: postgres-snake
  ports:
    - protocol: TCP
      name: postgres-snake
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-snake
  namespace: own
spec:
  serviceName: "postgres-snake"
  replicas: 1
  selector:
    matchLabels:
      app: postgres-snake
  volumeClaimTemplates:
    - metadata:
        name: postgres-snake-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "local-storage"
        resources:
          requests:
            storage: 2Gi
  template:
    metadata:
      labels:
        app: postgres-snake
    spec:
      containers:
        - name: postgres-snake
          image: postgres:latest
          envFrom:
            - configMapRef:
                name: postgres-config-snake
          ports:
            - containerPort: 5432
              name: postgredb
          volumeMounts:
            - name: postgres-snake-volume
              mountPath: /var/lib/postgresql/data
              subPath: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: snake-frontend
  namespace: own
spec:
  selector:
    app: snake-frontend
  ports:
    - protocol: TCP
      name: frontend
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: snake-server
  namespace: own
spec:
  selector:
    app: snake-server
  ports:
    - protocol: TCP
      name: server
      port: 3000
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: snake-rest-api
  namespace: own
spec:
  selector:
    app: snake-rest-api
  ports:
    - protocol: TCP
      name: rest-api
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: snake-frontend
  namespace: own
  labels:
    app: snake
spec:
  replicas: 1
  selector:
    matchLabels:
      app: snake-frontend
  template:
    metadata:
      labels:
        app: snake-frontend
    spec:
      restartPolicy: Always
      containers:
        - name: snake-frontend
          image: patrickkoss/snake-frontend:0.2
          ports:
            - containerPort: 80
          env:
            - name: VUE_APP_API_URL
              value: "https://your-server.com"
            - name: VUE_APP_BACKEND_URL
              value: "https://your-backend.com"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: snake-server
  namespace: own
  labels:
    app: snake-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: snake-server
  template:
    metadata:
      labels:
        app: snake-server
    spec:
      restartPolicy: Always
      containers:
        - name: snake-server
          image: patrickkoss/snake-server:0.5
          env:
            - name: VUE_APP_BACKEND_URL
              value: "https://your-backend.com"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: snake-rest-api
  namespace: own
  labels:
    app: snake-rest-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: snake-rest-api
  template:
    metadata:
      labels:
        app: snake-rest-api
    spec:
      restartPolicy: Always
      containers:
        - name: snake-rest-api
          image: patrickkoss/snake-rest-api:0.9
          command: ["bash", "-c", "python manage.py makemigrations && python manage.py migrate && gunicorn SnakeBackend.wsgi -b 0.0.0.0:8000"]
          ports:
            - containerPort: 8000
          env:
            - name: DB_HOST
              value: "postgres-snake"
            - name: DB_USER
              value: "snake"
            - name: DB_PORT
              value: "5432"
            - name: DB_PASSWORD
              value: "superSecretPassword"
